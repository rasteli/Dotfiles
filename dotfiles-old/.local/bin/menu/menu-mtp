#!/bin/bash
#  __  __ _____ _   _ _   _       __  __ _____ ____
# |  \/  | ____| \ | | | | |     |  \/  |_   _|  _ \
# | |\/| |  _| |  \| | | | |_____| |\/| | | | | |_) |
# | |  | | |___| |\  | |_| |_____| |  | | | | |  __/
# |_|  |_|_____|_| \_|\___/      |_|  |_| |_| |_|
#
# script for mounting and unmounting mtp devices.

# select which launcher to open.
source "$home/.local/bin/launcher"

# where to mount the device to.
mountpoint="/media/usb"
# used to open ranger.
terminal="alacritty"

declare options=("mount a device" "unmount a device")
choice=$(printf '%s\n' "${options[@]}" | dmenu -l 15 -h 22 -p 'select an option')

mount_dev() {
  dev="$1"

  simple-mtpfs --device "$dev" "$mountpoint"
  # used to check if there is content inside the mountpoint directory.
  # if so, mounting the device was successful.
  mp_content=$(ls "$mountpoint" | wc -l)

  # send an error notification and quit the application.
  [[ "$mp_content" -eq 0 ]] && notify-send -u critical "error" "error mounting device $dev on $mountpoint" && exit 1

  # send a notification informing the mounting was successful.
  notify-send -u normal "device mounted" "$dev mounted on $mountpoint"
  "$terminal" -e ranger "$mountpoint" # open the mountpoint in ranger.
}

unmount_dev() {
  dev="$1"

  fusermount -u "$mountpoint"
  # used to check if there is content inside the mountpoint directory.
  # if so, an error has occurred when unmountig the device.
  mp_content=$(ls "$mountpoint" | wc -l)

  # send an error notification and quit the application.
  [[ "$mp_content" -ne 0 ]] && notify-send -u critical "error" "error unmounting device $dev from $mountpoint" && exit 1

  # send a notification informing the unmounting was successful.
  notify-send -u normal "device unmounted" "$dev unmounted"
}

if [ -n "$choice" ]; then
  # lists all mtp devices connected.
  devices=$(simple-mtpfs -l)
  # prompts the devices and assigns just the selected one's index to the dev variable
  # (e.g. if "1: device one" is selected, dev will be 1).
  dev=$(printf '%s\n' "${devices[@]}" | dmenu -l 15 -h 22 -p 'select a device:' | awk -f ':' '{print $1}')

  [ -z "$dev" ] && exit 1 # if no device is selected, exits out the program.

  case "$choice" in
    "mount a device")
      mount_dev "$dev" ;;
    "unmount a device")
      unmount_dev "$dev" ;;
    *)  # if neither option is selected, exits out the program.
      echo "program terminated." && exit 1 ;;
  esac
fi

