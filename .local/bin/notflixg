#!/usr/bin/env bash
#  _   _  ___ _____ _____ _     _____  ______
# | \ | |/ _ \_   _|  ___| |   |_ _\ \/ / ___|
# |  \| | | | || | | |_  | |    | | \  / |  _
# | |\  | |_| || | |  _| | |___ | | /  \ |_| |
# |_| \_|\___/ |_| |_|   |_____|___/_/\_\____|
#
# Script for watching movies with webtorrent.

baseUrl="https://www.1377x.to"
cache_dir="$HOME/.cache/notflixg"

[ -d "$cache_dir" ] && rm -rf "$cache_dir/*" || mkdir "$cache_dir"

query=$(echo | dmenu -h 28 -p 'Search')

[ -z "$query" ] && exit 1

# Substituting eventual white spaces for +
# becuase this query is part of the url.
query=$(echo "$query" | sed 's/ /+/g')

# Downloading the searched query page.
curl -s "$baseUrl/search/$query/1/" > "$cache_dir/tmp.html"

# Grabbing the titles from the html of the page.
titles=$(grep "/torrent/.*" "$cache_dir/tmp.html"\
  | sed 's/<[^>]*>//g')

# Saving the torrent links from the html of the page.
grep -E '/torrent/' "$cache_dir/tmp.html"\
  | sed -E 's#.*(/torrent/.*)/">.*/#\1#'\
  | sed 's/td>//g' > "$cache_dir/links"

# Selecting the movie and cleaning the selection
# so that it matches with the url in the $cache_dir/links file.
selected=$(printf '%s\n' "${titles[@]}"\
  | dmenu -l 15 -h 22 -p '>'\
  | sed -e 's/[ \/\.]/-/g' -e 's/[\(\)\[]//g'\
  -e 's/\]//g' -e 's/[\:]//g')

[ -z "$selected" ] && exit 1

url=$(grep "$selected" "$cache_dir/links")

# Downloading the page where the magnet link is.
curl -s "$baseUrl$url" > "$cache_dir/tmp.html"

# Grabbing the magnet link from the html of the page.
magnet_link=$(grep -Po "magnet:\?xt=urn:btih:[z-zA-Z0-9]*" "$cache_dir/tmp.html" \
  | head -n 1)

# Opening the url with webtorrent in mpv.
notify-send -u normal "Notflixg" "Trying to fetch torrent metadata."
$HOME/.npm-packages/bin/webtorrent $magnet_link --mpv 2> $cache_dir/errlog-$(date +%Y%m%d-%H%M%S).txt

[[ "$?" -ne "0" ]] && notify-send -u critical "Notflixg" "Couldn't fetch torrent metadata! Exiting..." && exit 1
